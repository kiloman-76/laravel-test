php artisan ide-helper:generate - Генерация PhpDoc документации для Laravel фасадов
php artisan make:model Models/BlogCategory - Создание модели (флаг -m - создание миграции)

php artisan make:migration - Создание миграции
php artisan migrate - Накатить миграции
php artisan migrate:rollback - Откатить миграцию (--step=5 - откатить 5 миграций)
php artisan migrate:reset - Откатить все миграции
php artisan migrate:refresh - Откатить миграции, потом накатить обратно
(--step=5 - Обновить 5 миграций)
(--seed - ) - Обновить БД и заполнить стартовыми данными

$table->timestamps(); - Создание 2 полей - создание записи, обновление записи

php artisan db:seed - Наполнение БД стартовыми данными

php artisan route:list > file.txt - Список маршрутов в определеный файл

php artisan make:auth - Шаблоны и контроллеры авторизации
php artisan make:request BlogCategoryCreateRequest - создать Объект запроса,
в который можно добавлять дополнительные условия обработки запроса и валидацию (например на создание категории)

php artisan make:controller Namespace\Controller - Создать контроллер
флаг -r - ресурсный контроллер с базовыми методами

$items = BlogPost::all();
dd($items->first()); - Получить первый элемент
use SoftDeletes; - Совместно с SoftDeletes в миграциях, добавляеи фильтрацию по deleted_at
->withTrashed() - Добавить записи с заполненным deleted_at

public function __construct()
    {
        $this->middleware('auth'); - Защищает страницу от авторизованного пользователя
    }

@method('PATCH') -> Добавляет форме метод рест, чтобы Rest обработчик опознал форму
@csrf -> Дополнительная защита формы от подлогов хакеров

back() -> Редирект на предыдущую страницу
withInput() -> С сохранением заполнения форм

Шаблоны -> old('description', $item->description) (в инпуте - получить значение из предыдущей попытки ввода, если нет - то из БД)

?) except в роутах
?) all()->pluck('id')
?) find() или findOrFail()
$request->input()

@guest ... @else - ... @endguest (В шаблонах - разграничивает доступ )

ВАЛИДАЦИЯ

//        $rules = [
//            'title' => 'required|min:5|max:200',
//            'slug' => 'max:200',
//            'description' => 'string|min:3|max:500',
//            'parent_id' => 'required|integer|exists:blog_categories,id'
//        ];
//        $validatedData = $this->validate($request, $rules);
//        $validatedData = $request->validate($rules);
//        $validator = \Validator::make($request->all(), $rules);
//        $validatedData[] = $validator->passes(); //Выполнит проверку вернет true/false, можно прикрутить доп. действия
//        $validatedData[] = $validator->validate(); //Редиректит в случае ошибки
//        $validatedData[] = $validator->valid(); // Возвращает только правильные поля
//        $validatedData[] = $validator->failed(); // Возвращает только идентификаторы не прошедших валидацию полей вместе с ошибками
//        $validatedData[] = $validator->errors(); // Возвращает ошибки
//        $validatedData[] = $validator->fails(); //возвращает true если валидация провалилась

СОХРАНЕНИЕ МОДЕЛИ С ОПРЕДЕЛЕННЫМИ ДАННЫМИ

        $data = $request->input();

//        Создаст объект но не добавит в БД
//        $item = new BlogCategory($data);
//        $item->save(); // - Добавление в БД, вернет true или false;

        // Создаст объект и добавит в БД
        $item = (new BlogCategory())->create($data); // Сохранит и вернет объект